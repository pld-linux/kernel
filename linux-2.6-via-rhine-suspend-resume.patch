--- linux-2.6.8-rc3/drivers/net/via-rhine.c.org	2004-08-08 03:49:22.299019416 +0200
+++ linux-2.6.8-rc3/drivers/net/via-rhine.c	2004-08-08 03:56:07.143473704 +0200
@@ -492,6 +492,9 @@
 	dma_addr_t tx_bufs_dma;
 
 	struct pci_dev *pdev;
+#ifdef CONFIG_PM
+	long pioaddr;
+#endif
 	struct net_device_stats stats;
 	struct timer_list timer;	/* Media monitoring timer. */
 	spinlock_t lock;
@@ -796,6 +799,9 @@
 	spin_lock_init(&rp->lock);
 	rp->pdev = pdev;
 	rp->quirks = quirks;
+#ifdef CONFIG_PM
+	rp->pioaddr = ioaddr0;
+#endif
 	rp->mii_if.dev = dev;
 	rp->mii_if.mdio_read = mdio_read;
 	rp->mii_if.mdio_write = mdio_write;
@@ -1936,12 +1942,70 @@
 	pci_set_drvdata(pdev, NULL);
 }
 
+#ifdef CONFIG_PM
+static int rhine_suspend(struct pci_dev *pdev, u32 state)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct rhine_private *rp = netdev_priv(dev);
+	int ret;
+	
+	if (!netif_running(dev))
+		return 0;
+	
+	netif_device_detach(dev);
+	
+	pci_save_state(pdev, pdev->saved_config_space);
+	ret = pci_set_power_state(pdev, 3);
+	if (debug > 1)
+		printk(KERN_INFO "%s: Entering power state D3 %s (%d).\n",
+			dev->name, ret ? "failed" : "succeeded", ret);
+	return 0;
+}
+
+static int rhine_resume(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct rhine_private *rp = netdev_priv(dev);
+	unsigned long flags;
+	int ret;
+	
+	if (!netif_running(dev))
+		return 0;
+  
+	ret = pci_set_power_state(pdev, 0);
+	if (debug > 1)
+		printk(KERN_INFO "%s: Entering power state D0 %s (%d).\n",
+			dev->name, ret ? "failed" : "succeeded", ret);
+	
+	pci_restore_state(pdev, pdev->saved_config_space);
+	
+	spin_lock_irqsave(&rp->lock, flags);
+#ifdef USE_MMIO
+	enable_mmio(rp->pioaddr, rp->quirks);
+#endif
+	rhine_power_init(dev);
+	free_tbufs(dev);
+	free_rbufs(dev);
+	alloc_tbufs(dev);
+	alloc_rbufs(dev);
+	init_registers(dev);
+	spin_unlock_irqrestore(&rp->lock, flags);
+	
+	netif_device_attach(dev);
+	
+	return 0;
+}
+#endif /* CONFIG_PM */
 
 static struct pci_driver rhine_driver = {
 	.name		= "via-rhine",
 	.id_table	= rhine_pci_tbl,
 	.probe		= rhine_init_one,
 	.remove		= __devexit_p(rhine_remove_one),
+#ifdef CONFIG_PM
+	.suspend	= rhine_suspend,
+	.resume		= rhine_resume,
+#endif /* CONFIG_PM */
 };
 
 
