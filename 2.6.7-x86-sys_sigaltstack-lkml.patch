# This is a BitKeeper generated diff -Nru style patch.
#
# ChangeSet
#   2004/07/11 20:34:31-07:00 torvalds@ppc970.osdl.org 
#   x86: fix stackframe ownership confusion in sys_sigaltstack()
#   
#   gcc doesn't understand that "asmlinkage" routines have the
#   argument stack owned by the assembly-language caller, and the
#   recent sparse cleanup made gcc think it owns enough stack
#   frame space to make a tailcall by overwriting "struct pt_regs"
#   that is set up by the low-level system call code.
#   
#   Hide that problem again.
#   
#   The real fix would be to tell gcc that the caller owns the
#   stack frame that it set up, but we don't have any such
#   interfaces, so for now the best we can do is to hide it.
#   TAG: MailDone
# 
# arch/i386/kernel/signal.c
#   2004/07/11 20:34:24-07:00 torvalds@ppc970.osdl.org +7 -4
#   x86: fix stackframe ownership confusion in sys_sigaltstack()
#   
#   gcc doesn't understand that "asmlinkage" routines have the
#   argument stack owned by the assembly-language caller, and the
#   recent sparse cleanup made gcc think it owns enough stack
#   frame space to make a tailcall by overwriting "struct pt_regs"
#   that is set up by the low-level system call code.
#   
#   Hide that problem again.
#   
#   The real fix would be to tell gcc that the caller owns the
#   stack frame that it set up, but we don't have any such
#   interfaces, so for now the best we can do is to hide it.
# 
diff -Nru a/arch/i386/kernel/signal.c b/arch/i386/kernel/signal.c
--- a/arch/i386/kernel/signal.c	2004-07-11 22:13:39 -07:00
+++ b/arch/i386/kernel/signal.c	2004-07-11 22:13:39 -07:00
@@ -116,11 +116,14 @@
 }
 
 asmlinkage int
-sys_sigaltstack(struct pt_regs regs)
+sys_sigaltstack(unsigned long ebx)
 {
-	const stack_t __user *uss = (const stack_t __user *)regs.ebx;
-	stack_t __user *uoss = (stack_t __user *)regs.ecx;
-	return do_sigaltstack(uss, uoss, regs.esp);
+	/* This is needed to make gcc realize it doesn't own the "struct pt_regs" */
+	struct pt_regs *regs = (struct pt_regs *)&ebx;
+	const stack_t __user *uss = (const stack_t __user *)ebx;
+	stack_t __user *uoss = (stack_t __user *)regs->ecx;
+
+	return do_sigaltstack(uss, uoss, regs->esp);
 }
 
 
