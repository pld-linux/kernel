--- a/arch/i386/mm/init.c	2004-09-26 03:43:57.944613000 +1000
+++ b/arch/i386/mm/init.c	2004-09-28 02:37:21.787922000 +1000
@@ -41,6 +41,7 @@
 #include <asm/sections.h>
 
 unsigned int __VMALLOC_RESERVE = 128 << 20;
+EXPORT_SYMBOL(__VMALLOC_RESERVE);
 
 DEFINE_PER_CPU(struct mmu_gather, mmu_gathers);
 unsigned long highstart_pfn, highend_pfn;
--- a/drivers/scsi/megaraid/Kconfig.megaraid	2004-12-24 22:34:01.000000000 +0100
+++ b/drivers/scsi/megaraid/Kconfig.megaraid	2005-01-30 12:48:22.248759048 +0100
@@ -64,7 +64,6 @@
 	To compile this driver as a module, choose M here: the
 	module will be called megaraid_mbox
 
-if MEGARAID_NEWGEN=n
 config MEGARAID_LEGACY
 	tristate "LSI Logic Legacy MegaRAID Driver"
 	depends on PCI && SCSI
@@ -75,7 +74,6 @@
 
 	To compile this driver as a module, choose M here: the
 	module will be called megaraid
-endif
 
 config MEGARAID_SAS
 	tristate "LSI Logic MegaRAID SAS RAID Module"
--- a/arch/ppc/kernel/setup.c	2004-12-24 22:35:28.000000000 +0100
+++ b/arch/ppc/kernel/setup.c	2005-02-02 10:09:21.763162752 +0100
@@ -84,6 +84,7 @@
 
 #ifdef CONFIG_VGA_CONSOLE
 unsigned long vgacon_remap_base;
+EXPORT_SYMBOL(vgacon_remap_base);
 #endif
 
 struct machdep_calls ppc_md;
--- a/drivers/usb/gadget/serial.c	2004-12-24 22:35:24.000000000 +0100
+++ b/drivers/usb/gadget/serial.c	2005-02-15 09:39:48.408315792 +0100
@@ -329,10 +329,6 @@
 
 /* Functions */
 
-/* module */
-static int __init gs_module_init(void);
-static void __exit gs_module_exit(void);
-
 /* tty driver */
 static int gs_open(struct tty_struct *tty, struct file *file);
 static void gs_close(struct tty_struct *tty, struct file *file);
@@ -712,8 +708,6 @@
 module_param(use_acm, uint, S_IRUGO);
 MODULE_PARM_DESC(use_acm, "Use CDC ACM, 0=no, 1=yes, default=no");
 
-module_init(gs_module_init);
-module_exit(gs_module_exit);
 
 /*
 *  gs_module_init
@@ -761,6 +755,7 @@
 	printk(KERN_INFO "gs_module_init: %s %s loaded\n", GS_LONG_NAME, GS_VERSION_STR);
 	return 0;
 }
+module_init(gs_module_init);
 
 /*
 * gs_module_exit
@@ -775,6 +770,7 @@
 
 	printk(KERN_INFO "gs_module_exit: %s %s unloaded\n", GS_LONG_NAME, GS_VERSION_STR);
 }
+module_exit(gs_module_exit);
 
 /* TTY Driver */
 
--- a/drivers/char/rocket.c	2004-12-24 22:35:21.000000000 +0100
+++ b/drivers/char/rocket.c	2005-02-15 09:48:39.050645896 +0100
@@ -210,11 +210,6 @@
 module_param_array(pc104_4, ulong, NULL, 0);
 MODULE_PARM_DESC(pc104_4, "set interface types for ISA(PC104) board #4 (e.g. pc104_4=232,232,485,485,...");
 
-int rp_init(void);
-static void rp_cleanup_module(void);
-
-module_init(rp_init);
-module_exit(rp_cleanup_module);
 
 #endif
 
@@ -2422,10 +2417,11 @@
 
 	return 0;
 }
+module_init(rp_init);
 
 #ifdef MODULE
 
-static void rp_cleanup_module(void)
+static void __exit rp_cleanup_module(void)
 {
 	int retval;
 	int i;
@@ -2451,6 +2447,8 @@
 	if (controller)
 		release_region(controller, 4);
 }
+module_exit(rp_cleanup_module);
+
 #endif
 
 #ifndef TRUE
--- a/arch/alpha/kernel/alpha_ksyms.c	2005-03-13 07:44:05.000000000 +0100
+++ b/arch/alpha/kernel/alpha_ksyms.c	2005-03-15 23:20:00.405832368 +0100
@@ -67,6 +67,9 @@
 EXPORT_SYMBOL(alpha_using_srm);
 #endif /* CONFIG_ALPHA_GENERIC */
 
+#include <linux/pm.h>
+EXPORT_SYMBOL(pm_power_off);
+
 /* platform dependent support */
 EXPORT_SYMBOL(strcat);
 EXPORT_SYMBOL(strcmp);
--- a/arch/alpha/kernel/process.c	2005-03-13 07:44:40.000000000 +0100
+++ b/arch/alpha/kernel/process.c	2005-03-15 23:28:15.687538104 +0100
@@ -183,6 +183,8 @@
 
 EXPORT_SYMBOL(machine_power_off);
 
+void (*pm_power_off)(void) = machine_power_off;
+
 /* Used by sysrq-p, among others.  I don't believe r9-r15 are ever
    saved in the context it's used.  */
 
--- a/drivers/atm/atmdd.c	2005-10-03 13:17:48.000000000 +0200
+++ b/drivers/atm/atmdd.c	2005-10-03 17:51:59.322010250 +0200
@@ -211,6 +211,7 @@
     while ((skb = myatmdd_rxq_dequeue(&priv->rxqueue, &pkt_len)))
     {
         struct sk_buff *newskb;
+        struct timeval stamp;
 
         /* Get a new skb to replace the one just consumed */
         if (!(newskb = dev_alloc_skb(AAL5_BUFLEN)))
@@ -242,7 +243,8 @@
             atomic_inc(&vcc->stats->rx);
 
             /* add timestamp for upper layers to use */
-	    do_gettimeofday(&skb->stamp);
+	    do_gettimeofday(&stamp);
+	    skb_set_timestamp(skb, &stamp);
         
             /* Point socket buffer at the right VCC before giving to socket layer */
             ATM_SKB(skb)->vcc = vcc;
--- a/fs/binfmt_elf.c	2005-09-30 23:17:35.000000000 +0200
+++ b/fs/binfmt_elf.c	2005-10-07 11:46:27.159874250 +0200
@@ -905,7 +905,7 @@ static int load_elf_binary(struct linux_
 		send_sig(SIGKILL, current, 0);
 		goto out_free_dentry;
 	}
-	if (padzero(elf_bss)) {
+	if ((elf_bss != elf_brk) && padzero(elf_bss)) {
 		send_sig(SIGSEGV, current, 0);
 		retval = -EFAULT; /* Nobody gets to see this, but.. */
 		goto out_free_dentry;
