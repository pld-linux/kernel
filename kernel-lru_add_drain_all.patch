commit f31f0e205efd969ebb8045e5244a934a6899f670
Author: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Date:   Tue Dec 9 13:14:16 2008 -0800

    mm: remove UP version of lru_add_drain_all()
    
    commit 6841c8e26357904ef462650273f5d5015f7bb370 upstream.
    
    Currently, lru_add_drain_all() has two version.
      (1) use schedule_on_each_cpu()
      (2) don't use schedule_on_each_cpu()
    
    Gerald Schaefer reported it doesn't work well on SMP (not NUMA) S390
    machine.
    
      offline_pages() calls lru_add_drain_all() followed by drain_all_pages().
      While drain_all_pages() works on each cpu, lru_add_drain_all() only runs
      on the current cpu for architectures w/o CONFIG_NUMA. This let us run
      into the BUG_ON(!PageBuddy(page)) in __offline_isolated_pages() during
      memory hotplug stress test on s390. The page in question was still on the
      pcp list, because of a race with lru_add_drain_all() and drain_all_pages()
      on different cpus.
    
    Actually, Almost machine has CONFIG_UNEVICTABLE_LRU=y. Then almost machine use
    (1) version lru_add_drain_all although the machine is UP.
    
    Then this ifdef is not valueable.
    simple removing is better.
    
    Signed-off-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Christoph Lameter <cl@linux-foundation.org>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Acked-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Cc: Dave Hansen <dave@linux.vnet.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Nick Piggin <npiggin@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/mm/swap.c b/mm/swap.c
index 9e0cb31..65e6825 100644
--- a/mm/swap.c
+++ b/mm/swap.c
@@ -244,7 +244,6 @@ void lru_add_drain(void)
 	put_cpu();
 }
 
-#ifdef CONFIG_NUMA
 static void lru_add_drain_per_cpu(struct work_struct *dummy)
 {
 	lru_add_drain();
@@ -258,18 +257,6 @@ int lru_add_drain_all(void)
 	return schedule_on_each_cpu(lru_add_drain_per_cpu);
 }
 
-#else
-
-/*
- * Returns 0 for success
- */
-int lru_add_drain_all(void)
-{
-	lru_add_drain();
-	return 0;
-}
-#endif
-
 /*
  * Batched page_cache_release().  Decrement the reference count on all the
  * passed pages.  If it fell to zero then remove the page from the LRU and
