--- linux-2.6.19/net/ipv4/netfilter/ipt_layer7.c	2006-12-15 02:28:16.000000000 +0100
+++ linux-2.6.19-buildable/net/ipv4/netfilter/ipt_layer7.c	2006-12-15 03:21:05.000000000 +0100
@@ -24,6 +24,7 @@
 #include <net/ip.h>
 #include <net/tcp.h>
 #include <linux/spinlock.h>
+#include <linux/version.h>
 
 #include "regexp/regexp.c"
 
@@ -329,9 +330,12 @@ static int add_data(struct ip_conntrack 
 }
 
 /* Returns true on match and false otherwise.  */
-static int match(/* const */ struct sk_buff *skb,
-	const struct net_device *in, const struct net_device *out,
-	const struct xt_match *match, const void *matchinfo,
+static int 
+match(const struct sk_buff *skb1,
+	const struct net_device *in, 
+	const struct net_device *out,
+	const struct xt_match *match, 
+	const void *matchinfo,
 	int offset, unsigned int protoff, int *hotdrop)
 {
 	struct ipt_layer7_info * info = (struct ipt_layer7_info *)matchinfo;
@@ -340,6 +344,12 @@ static int match(/* const */ struct sk_b
 	unsigned char * app_data;
 	unsigned int pattern_result, appdatalen;
 	regexp * comppattern;
+	
+	
+	/* we cheat about const but writing to skb is a standard way here */
+	 
+	struct sk_buff *skb = (struct sk_buff*) skb1;
+	
 
 	if(!can_handle(skb)){
 		DPRINTK("layer7: This is some protocol I can't handle.\n");
@@ -457,13 +467,18 @@ static int match(/* const */ struct sk_b
 }
 
 static int checkentry(const char *tablename, const void *ip,
-	const struct xt_match *match, void *matchinfo, unsigned int matchsize,
+	const struct xt_match *match, void *matchinfo, 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19)
+	unsigned int matchsize,
+#endif
 	unsigned int hook_mask)
 {
 //        struct ipt_layer7_info * info = (struct ipt_layer7_info *)matchinfo;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19)
 	if (matchsize != IPT_ALIGN(sizeof(struct ipt_layer7_info)))
 		return 0;
+#endif
 
 	return 1;
 }
