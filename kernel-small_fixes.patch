; https://lkml.org/lkml/2019/7/10/244
diff -ur linux-5.3/drivers/scsi/aacraid.org/aacraid.h linux-5.3/drivers/scsi/aacraid/aacraid.h
--- linux-5.3/drivers/scsi/aacraid.org/aacraid.h	2019-11-01 22:42:37.011469816 +0100
+++ linux-5.3/drivers/scsi/aacraid/aacraid.h	2019-11-04 09:29:51.321486211 +0100
@@ -2740,17 +2740,6 @@
 int aac_rx_deliver_producer(struct fib * fib);
 void aac_reinit_aif(struct aac_dev *aac, unsigned int index);
 
-static inline int aac_is_src(struct aac_dev *dev)
-{
-	u16 device = dev->pdev->device;
-
-	if (device == PMC_DEVICE_S6 ||
-		device == PMC_DEVICE_S7 ||
-		device == PMC_DEVICE_S8)
-		return 1;
-	return 0;
-}
-
 static inline int aac_supports_2T(struct aac_dev *dev)
 {
 	return (dev->adapter_info.options & AAC_OPT_NEW_COMM_64);
diff -ur linux-5.3/drivers/scsi/aacraid.org/comminit.c linux-5.3/drivers/scsi/aacraid/comminit.c
--- linux-5.3/drivers/scsi/aacraid.org/comminit.c	2019-11-01 22:42:37.014803249 +0100
+++ linux-5.3/drivers/scsi/aacraid/comminit.c	2019-11-04 09:29:51.321486211 +0100
@@ -41,8 +41,11 @@
 {
 	u32 status = 0;
 
-	if (aac_is_src(dev))
+	if (dev->pdev->device == PMC_DEVICE_S6 ||
+		dev->pdev->device == PMC_DEVICE_S7 ||
+		dev->pdev->device == PMC_DEVICE_S8) {
 		status = src_readl(dev, MUnit.OMR);
+	}
 	return (status & AAC_INT_MODE_MSIX);
 }
 
@@ -349,7 +352,8 @@
 	/* FIB should be freed only after getting the response from the F/W */
 	if (status != -ERESTARTSYS)
 		aac_fib_free(fibctx);
-	if (aac_is_src(dev) &&
+	if ((dev->pdev->device == PMC_DEVICE_S7 ||
+	     dev->pdev->device == PMC_DEVICE_S8) &&
 	     dev->msi_enabled)
 		aac_set_intx_mode(dev);
 	return status;
@@ -610,7 +614,8 @@
 		dev->max_fib_size = status[1] & 0xFFE0;
 		host->sg_tablesize = status[2] >> 16;
 		dev->sg_tablesize = status[2] & 0xFFFF;
-		if (aac_is_src(dev)) {
+		if (dev->pdev->device == PMC_DEVICE_S7 ||
+		    dev->pdev->device == PMC_DEVICE_S8) {
 			if (host->can_queue > (status[3] >> 16) -
 					AAC_NUM_MGT_FIB)
 				host->can_queue = (status[3] >> 16) -
@@ -629,7 +634,9 @@
 			pr_warn("numacb=%d ignored\n", numacb);
 	}
 
-	if (aac_is_src(dev))
+	if (dev->pdev->device == PMC_DEVICE_S6 ||
+	    dev->pdev->device == PMC_DEVICE_S7 ||
+	    dev->pdev->device == PMC_DEVICE_S8)
 		aac_define_int_mode(dev);
 	/*
 	 *	Ok now init the communication subsystem
diff -ur linux-5.3/drivers/scsi/aacraid.org/commsup.c linux-5.3/drivers/scsi/aacraid/commsup.c
--- linux-5.3/drivers/scsi/aacraid.org/commsup.c	2019-11-01 22:42:37.014803249 +0100
+++ linux-5.3/drivers/scsi/aacraid/commsup.c	2019-11-04 09:29:51.321486211 +0100
@@ -2593,7 +2593,9 @@
 {
 	int i;
 
-	if (aac_is_src(dev)) {
+	if (dev->pdev->device == PMC_DEVICE_S6 ||
+	    dev->pdev->device == PMC_DEVICE_S7 ||
+	    dev->pdev->device == PMC_DEVICE_S8) {
 		if (dev->max_msix > 1) {
 			for (i = 0; i < dev->max_msix; i++)
 				free_irq(pci_irq_vector(dev->pdev, i),
diff -ur linux-5.3/drivers/scsi/aacraid.org/linit.c linux-5.3/drivers/scsi/aacraid/linit.c
--- linux-5.3/drivers/scsi/aacraid.org/linit.c	2019-11-01 22:42:37.011469816 +0100
+++ linux-5.3/drivers/scsi/aacraid/linit.c	2019-11-04 09:29:51.321486211 +0100
@@ -1567,8 +1567,9 @@
 	aac_send_shutdown(aac);
 
 	aac_adapter_disable_int(aac);
-
-	if (aac_is_src(aac)) {
+	if (aac->pdev->device == PMC_DEVICE_S6 ||
+	    aac->pdev->device == PMC_DEVICE_S7 ||
+	    aac->pdev->device == PMC_DEVICE_S8) {
 		if (aac->max_msix > 1) {
 			for (i = 0; i < aac->max_msix; i++) {
 				free_irq(pci_irq_vector(aac->pdev, i),
@@ -1858,7 +1859,8 @@
 	aac_adapter_enable_int(dev);
 
 
-	if (aac_is_src(dev))
+	if (dev->pdev->device == PMC_DEVICE_S7 ||
+	    dev->pdev->device == PMC_DEVICE_S8)
 		aac_define_int_mode(dev);
 
 	if (dev->msi_enabled)

--- linux-5.15/arch/x86/kernel/alternative.c.orig	2025-05-24 14:33:00.616663327 +0200
+++ linux-5.15/arch/x86/kernel/alternative.c	2025-05-24 14:42:49.963329920 +0200
@@ -359,6 +359,21 @@
 	return insn->opcode.bytes[0] == 0x0f && (insn->opcode.bytes[1] & 0xf0) == 0x80;
 }
 
+bool cpu_wants_rethunk(void)
+{
+	return cpu_feature_enabled(X86_FEATURE_RETHUNK);
+}
+
+bool cpu_wants_rethunk_at(void *addr)
+{
+	if (!cpu_feature_enabled(X86_FEATURE_RETHUNK))
+		return false;
+	if (x86_return_thunk != its_return_thunk)
+		return true;
+
+	return !((unsigned long)addr & 0x20);
+}
+
 #if defined(CONFIG_RETPOLINE) && defined(CONFIG_STACK_VALIDATION)
 
 /*
@@ -749,21 +764,6 @@
 
 #ifdef CONFIG_RETHUNK
 
-bool cpu_wants_rethunk(void)
-{
-	return cpu_feature_enabled(X86_FEATURE_RETHUNK);
-}
-
-bool cpu_wants_rethunk_at(void *addr)
-{
-	if (!cpu_feature_enabled(X86_FEATURE_RETHUNK))
-		return false;
-	if (x86_return_thunk != its_return_thunk)
-		return true;
-
-	return !((unsigned long)addr & 0x20);
-}
-
 /*
  * Rewrite the compiler generated return thunk tail-calls.
  *
