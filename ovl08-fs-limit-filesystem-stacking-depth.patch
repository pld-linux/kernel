From d990b52f916662c551b56aa46ef86141ecc4e679 Mon Sep 17 00:00:00 2001
From: Miklos Szeredi <mszeredi@suse.cz>
Date: Thu, 30 Aug 2012 16:13:50 +0200
Subject: [PATCH 08/13] fs: limit filesystem stacking depth
Patch-mainline: not yet

Add a simple read-only counter to super_block that indicates deep this
is in the stack of filesystems.  Previously ecryptfs was the only
stackable filesystem and it explicitly disallowed multiple layers of
itself.

Overlayfs, however, can be stacked recursively and also may be stacked
on top of ecryptfs or vice versa.

To limit the kernel stack usage we must limit the depth of the
filesystem stack.  Initially the limit is set to 2.

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/ecryptfs/main.c   |    7 +++++++
 fs/overlayfs/super.c |   10 ++++++++++
 include/linux/fs.h   |   11 +++++++++++
 3 files changed, 28 insertions(+)

Index: linux-3.6-rc7-master/fs/ecryptfs/main.c
===================================================================
--- linux-3.6-rc7-master.orig/fs/ecryptfs/main.c	2012-09-24 03:10:57.000000000 +0200
+++ linux-3.6-rc7-master/fs/ecryptfs/main.c	2012-09-28 13:37:00.000000000 +0200
@@ -566,6 +566,13 @@ static struct dentry *ecryptfs_mount(str
 	s->s_maxbytes = path.dentry->d_sb->s_maxbytes;
 	s->s_blocksize = path.dentry->d_sb->s_blocksize;
 	s->s_magic = ECRYPTFS_SUPER_MAGIC;
+	s->s_stack_depth = path.dentry->d_sb->s_stack_depth + 1;
+
+	rc = -EINVAL;
+	if (s->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
+		printk(KERN_ERR "eCryptfs: maximum fs stacking depth exceeded\n");
+		goto out_free;
+	}
 
 	inode = ecryptfs_get_inode(path.dentry->d_inode, s);
 	rc = PTR_ERR(inode);
Index: linux-3.6-rc7-master/fs/overlayfs/super.c
===================================================================
--- linux-3.6-rc7-master.orig/fs/overlayfs/super.c	2012-09-28 13:36:57.000000000 +0200
+++ linux-3.6-rc7-master/fs/overlayfs/super.c	2012-09-28 13:37:00.000000000 +0200
@@ -570,6 +570,16 @@ static int ovl_fill_super(struct super_b
 	}
 	ufs->lower_namelen = statfs.f_namelen;
 
+	sb->s_stack_depth = max(upperpath.mnt->mnt_sb->s_stack_depth,
+				lowerpath.mnt->mnt_sb->s_stack_depth) + 1;
+
+	err = -EINVAL;
+	if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
+		printk(KERN_ERR "overlayfs: maximum fs stacking depth exceeded\n");
+		goto out_put_lowerpath;
+	}
+
+
 	ufs->upper_mnt = clone_private_mount(&upperpath);
 	err = PTR_ERR(ufs->upper_mnt);
 	if (IS_ERR(ufs->upper_mnt)) {
Index: linux-3.6-rc7-master/include/linux/fs.h
===================================================================
--- linux-3.6-rc7-master.orig/include/linux/fs.h	2012-09-28 13:36:47.000000000 +0200
+++ linux-3.6-rc7-master/include/linux/fs.h	2012-09-28 13:37:00.000000000 +0200
@@ -513,6 +513,12 @@ struct iattr {
  */
 #include <linux/quota.h>
 
+/*
+ * Maximum number of layers of fs stack.  Needs to be limited to
+ * prevent kernel stack overflow
+ */
+#define FILESYSTEM_MAX_STACK_DEPTH 2
+
 /** 
  * enum positive_aop_returns - aop return codes with specific semantics
  *
@@ -1586,6 +1592,11 @@ struct super_block {
 
 	/* Being remounted read-only */
 	int s_readonly_remount;
+
+	/*
+	 * Indicates how deep in a filesystem stack this SB is
+	 */
+	int s_stack_depth;
 };
 
 /* superblock cache pruning functions */
