--- linux-2.6.5/net/ipv4/ip_output.c.orig	2004-04-29 15:11:24.000000000 +0200
+++ linux-2.6.5/net/ipv4/ip_output.c	2004-04-29 15:28:26.159293360 +0200
@@ -124,15 +124,6 @@
 	return ttl;
 }
 
-#ifdef CONFIG_NETFILTER
-/* out-of-line copy is only required with netfilter */
-int ip_dst_output(struct sk_buff *skb)
-{
-	return NF_HOOK_COND(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
-	                    skb->dst->dev, dst_output, skb->dst->xfrm != NULL);
-}
-#endif
-
 /* 
  *		Add an ip header to a skbuff and send it out.
  *
--- linux-2.6.5/include/net/ip.h.orig	2004-04-29 15:11:24.000000000 +0200
+++ linux-2.6.5/include/net/ip.h	2004-04-29 15:42:56.958911696 +0200
@@ -227,7 +227,7 @@
 		__ip_select_ident(iph, dst, more);
 }
 
-extern inline int ip_dst_output(struct sk_buff *skb)
+static inline int ip_dst_output(struct sk_buff *skb)
 {
 	return NF_HOOK_COND(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
 	                    skb->dst->dev, dst_output, skb->dst->xfrm != NULL);
--- linux/net/ipv4/netfilter/ipt_string.c.orig	2004-05-19 09:07:06.000000000 +0200
+++ linux/net/ipv4/netfilter/ipt_string.c	2004-05-19 09:45:37.664960640 +0200
@@ -17,6 +17,7 @@
  * 		packet basis.
  */
 
+#include <linux/cpumask.h>
 #include <linux/smp.h>
 #include <linux/module.h>
 #include <linux/skbuff.h>
@@ -163,7 +164,7 @@
 	int c;
 	
 	if ( bm_string_data ) {
-		for(c=0; c<smp_num_cpus; c++) {
+		for(c=0; c<num_online_cpus(); c++) {
 			if ( bm_string_data[c].shift ) kfree(bm_string_data[c].shift);
 			if ( bm_string_data[c].skip ) kfree(bm_string_data[c].skip);
 			if ( bm_string_data[c].len ) kfree(bm_string_data[c].len);
@@ -181,7 +182,7 @@
 	size_t tlen;
 	size_t alen;
 
-	tlen=sizeof(struct string_per_cpu)*smp_num_cpus;
+	tlen=sizeof(struct string_per_cpu)*num_online_cpus();
 	alen=sizeof(int)*BM_MAX_HLEN;
 	
 	/* allocate array of structures */
@@ -192,7 +193,7 @@
 	memset(bm_string_data, 0, tlen);
 	
 	/* allocate our skip/shift tables */
-	for(c=0; c<smp_num_cpus; c++) {
+	for(c=0; c<num_online_cpus(); c++) {
 		if ( !(bm_string_data[c].shift=kmalloc(alen, GFP_KERNEL)) )
 			goto alloc_fail;
 		if ( !(bm_string_data[c].skip=kmalloc(alen, GFP_KERNEL)) )
